@page
@model NaturalDisasterInformationSystem.Pages.User.ListDisasterModel
@{
}
<div class=""
     style="background-image: url('/assets/images/bg_7.jpg');
           background-size: cover; background-position: center center;
           background-attachment: fixed; min-height: 100vh; display: flex;
           align-items: center; justify-content: center; position: relative;">

    <div class="overlay"
         style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;
               background: rgba(0, 0, 0, 0.5); z-index: 1;"></div>

    <div class="container"
         style="position: relative; z-index: 2; padding: 20px; max-width: 1400px;
               margin: 0 auto; width: 100%; padding-top: 73px;">
        <div class="profile-section" style="display: ; gap: 20px; margin: 20px 0; align-items: flex-start;background-color: #ffffff; border-radius: 8px; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">
            <div class="profile-details" style="flex: 1; background-color: #ffffff; border-radius: 8px; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); padding: 20px;">
                <h2 style="font-size: 36px; font-weight: bold; animation: pulse 1s infinite;text-align:center">
                    ⚠️CẢNH BÁO THIÊN TAI⚠️
                </h2>
                <div id="filterSection" 
                     style="display: flex; flex-wrap: wrap; gap: 20px; align-items: center;
                   background: rgba(255, 255, 255, 0.9); padding: 20px 30px;
                   border-radius: 15px; box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1); justify-content: center;">

                    <select id="disasterTypeFilter"
                            style="padding: 12px; border: 1px solid #ddd; border-radius: 8px;
                       outline: none; transition: 0.3s;">
                        <option value="">Tất cả</option>
                        @{
                            var uniqueDisasters = Model.Disasters
                            .Select(d => d.DisasterDetails.NameDisaster)
                            .Distinct()
                            .ToList();
                        }
                        @foreach (var disasterName in uniqueDisasters)
                        {
                            <option value="@disasterName">@disasterName</option>
                        }
                    </select>

                    <input type="text" id="affectedAreaSearch"
                           placeholder="Tìm kiếm Khu vực bị ảnh hưởng"
                           style="padding: 12px; border: 1px solid #ddd; border-radius: 8px;
                       outline: none; transition: 0.3s;" />
                </div>
                <div>
                    @if (Model.Disasters != null && Model.Disasters.Count > 0)
                    {
                        var dateNow = DateTime.Now;
                        var recentDisasters = Model.Disasters
                        .Where(d => d.TimeUpdate >= dateNow.AddDays(-300))
                        .OrderByDescending(d => d.TimeUpdate)
                        .ToList();

                        var hasRecentDisaster = recentDisasters.Any();
                        @if (hasRecentDisaster)
                        {
                            <div id="disasterList" style="display: flex; flex-wrap: wrap; gap: 20px;">
                                @foreach (var disaster in recentDisasters)
                                {
                                    var levelClass = disaster.Level <= 3 ? "low-level" :
                                    (disaster.Level > 3 && disaster.Level <= 7) ? "moderate-level" : "high-level";

                                    <div class="disaster-item @levelClass"
                                         data-disaster-type="@disaster.DisasterDetails?.NameDisaster"
                                         data-affected-area="@disaster.AffectedArea"
                                         style="flex: 1 1 calc(33.333% - 20px); border-radius: 5px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); font-size: 0.9rem; border-top: solid;
             background-color: @(disaster.Level <= 3 ? "#d4edda" : (disaster.Level <= 7 ? "#fff3cd" : "#f8d7da"));
             border-left: 5px solid @(disaster.Level <= 3 ? "#28a745" : (disaster.Level <= 7 ? "#ffc107" : "#dc3545"));">
                                        <strong>Loại hình:</strong> @disaster.DisasterDetails?.NameDisaster <br>
                                        <strong>Khu vực:</strong> @disaster.AffectedArea <br>
                                        <strong>Thời gian:</strong> @disaster.TimeUpdate.ToString("g") <br>
                                        <strong>Cấp độ:</strong> @disaster.Level
                                        <form method="post" asp-page-handler="AddDisaster">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="disasterName" value="@disaster.DisasterDetails?.NameDisaster" />
                                            <input type="hidden" name="location" value="@disaster.AffectedArea" />
                                            <input type="hidden" name="description" value="@disaster.Description" />
                                            <input type="hidden" name="severityLevel" value="@disaster.Level" />
                                            <input type="hidden" name="idjson" value="@disaster.Id" />
                                            <button type="submit"
                                                    style="background: none; border: none; color: #007bff; text-decoration: underline; cursor: pointer; padding: 0; margin-right: 10px;">
                                                Chi tiết
                                            </button>
                                        </form>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div style="display: flex; justify-content: center; align-items: center; height: 200px;">
                                <p style="color: #666; font-size: 0.9rem; text-align: center;">Không có thông tin thiên tai gần đây.</p>
                            </div>
                        }
                    }
                    else
                    {
                        <p style="color: #666; font-size: 0.9rem; text-align: center;">Không có thông tin thiên tai gần đây.</p>
                    }
                </div>
            </div>

            <div class="pagination-container text-center mt-4">
                <nav>
                    <ul class="pagination" id="pagination"></ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const disasterList = document.getElementById("disasterList");
        const disasterItems = Array.from(disasterList.getElementsByClassName("disaster-item"));
        const disasterTypeFilter = document.getElementById("disasterTypeFilter");
        const affectedAreaSearch = document.getElementById("affectedAreaSearch");

        const itemsPerPage = 15; // Số lượng mục trên mỗi trang
        let currentPage = 1;

        // Hàm lọc thiên tai theo loại và khu vực
        function filterDisasters() {
            const selectedType = disasterTypeFilter.value.toLowerCase();
            const searchArea = affectedAreaSearch.value.toLowerCase();

            const filteredItems = disasterItems.filter(item => {
                const itemType = item.getAttribute("data-disaster-type").toLowerCase();
                const itemArea = item.getAttribute("data-affected-area").toLowerCase();

                const matchesType = selectedType === "" || itemType.includes(selectedType);
                const matchesArea = searchArea === "" || itemArea.includes(searchArea);

                return matchesType && matchesArea;
            });

            return filteredItems;
        }

        // Hàm hiển thị các mục của trang hiện tại
        function showPage(page, items) {
            disasterItems.forEach(item => {
                item.style.display = "none"; // Ẩn tất cả các mục
            });

            items.forEach((item, index) => {
                if (index >= (page - 1) * itemsPerPage && index < page * itemsPerPage) {
                    item.style.display = "block"; // Hiển thị các mục trong trang hiện tại
                }
            });
        }

        // Hàm tạo các nút phân trang
        function createPagination(items) {
            const totalPages = Math.ceil(items.length / itemsPerPage);
            const paginationContainer = document.getElementById("pagination");
            paginationContainer.innerHTML = "";

            // Nếu số trang nhỏ hơn hoặc bằng 5, hiển thị tất cả
            if (totalPages <= 5) {
                for (let i = 1; i <= totalPages; i++) {
                    createPageButton(i, totalPages, paginationContainer, items);
                }
            } else {
                // Hiển thị nút đầu tiên
                createPageButton(1, totalPages, paginationContainer, items);

                // Hiển thị các nút ở giữa
                let startPage = Math.max(currentPage - 2, 2);
                let endPage = Math.min(currentPage + 2, totalPages - 1);

                for (let i = startPage; i <= endPage; i++) {
                    createPageButton(i, totalPages, paginationContainer, items);
                }

                // Hiển thị nút cuối cùng
                if (endPage < totalPages) {
                    createPageButton(totalPages, totalPages, paginationContainer, items);
                }
            }

            // Thêm nút "Đầu" và "Cuối"
            createNavigationButton("Đầu", 1, paginationContainer, items);
            createNavigationButton("Cuối", totalPages, paginationContainer, items);
        }

        // Hàm tạo nút phân trang
        function createPageButton(page, totalPages, container, items) {
            const pageItem = document.createElement("li");
            pageItem.className = "page-item";
            if (page === currentPage) {
                pageItem.classList.add("active");
            }

            const pageLink = document.createElement("a");
            pageLink.className = "page-link";
            pageLink.href = "#";
            pageLink.innerText = page;
            pageLink.addEventListener("click", function () {
                currentPage = page;
                showPage(currentPage, items);
                createPagination(items);
            });

            pageItem.appendChild(pageLink);
            container.appendChild(pageItem);
        }

        // Hàm tạo nút điều hướng (Đầu, Cuối)
        function createNavigationButton(label, page, container, items) {
            const navItem = document.createElement("li");
            navItem.className = "page-item";
            const navLink = document.createElement("a");
            navLink.className = "page-link";
            navLink.href = "#";
            navLink.innerText = label;
            navLink.addEventListener("click", function () {
                currentPage = page;
                showPage(currentPage, items);
                createPagination(items);
            });
            navItem.appendChild(navLink);
            container.appendChild(navItem);
        }

        // Hàm cập nhật danh sách thiên tai
        function updateDisasters() {
            const filteredItems = filterDisasters();
            currentPage = 1; // Reset về trang đầu tiên khi cập nhật
            createPagination(filteredItems);
            showPage(currentPage, filteredItems);
        }

        // Lắng nghe sự kiện thay đổi bộ lọc
        disasterTypeFilter.addEventListener("change", updateDisasters);
        affectedAreaSearch.addEventListener("input", updateDisasters);

        updateDisasters(); // Hiển thị ban đầu
    });

</script>

